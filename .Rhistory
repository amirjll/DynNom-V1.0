require(survival)
llik <- function (pa, y, shape){
si <- rep(pa[1], dim(y)[1])  ### sigma
sh <- rep(pa[2], dim(y)[1])  ### Shape
#    if ( any(1+sh*y$times/si <= 0 ) | si[1]<=0 | sh[1]>=0.5) outp<- -10^7
if (any(1 + sh * y$times / si <= 0) | si[1] <= 0 | sh[1] >= 0.5) outp <- - 10 ^ 7
else outp <- sum(y$status * log(1 / si * (1 + sh * y$times / si) ^ (- (1 / sh + 1))) + (1 - y$status) * log((1 + sh * y$times / si) ^ (- 1 / sh)))
-outp
}
KMarea <- function(fit, u){
if (sum(fit$time <= u, na.rm = T) == 0) survInU <- 1        ###### Estimated survival at time u
else survInU <- min(fit$surv[fit$time <= u])
X <- c(u, fit$time[fit$time > u])
Y <- c(survInU, fit$surv[fit$time > u])
sum((X[2 : length(X)] - X[1 : (length(X) - 1)]) * Y[1 : (length(Y) - 1)])
}
fit1 <- survfit(Surv(times, status) ~ 1, data = dat)
BPD <- read.csv("C:\\Users\\13239018\\Dropbox\\Projects\\MRL\\bpd.csv", header=T)
dat <- tbl_df(BPD)
dat <- rename(dat, times = ondays, status = censor)
fit1 <- survfit(Surv(times, status) ~ 1, data = dat)
Medi <- sort(fit1$time)[length(fit1$time) * 0.80]
or <- order(dat$times, decreasing = FALSE)
y <- dat[or, ]
y <- y[y$times > Medi, ]
u <- min(y$times)
v <- max(y$times)
y$times <- y$times - u
a <- optim(c(0.1, 0.1), llik, y = y, shape = shape , hessian = TRUE, method = "Nelder-Mead") #,control=list(maxit=10000))
mlesi <- a$par[1]
mlesh <- a$par[2]
survInU <- min(fit1$surv[fit1$time <= u])
survInV <- min(fit1$surv[fit1$time <= v])
mlemv <- (mlesi + mlesh * (v - u)) / (1 - mlesh)
mlemu <- mlesi / (1 - mlesh)
mrlf <- function(ti){
if (sum(!fit1$time >= ti) == 0) survInX <- 1 else survInX <- max(fit1$surv[sum(!fit1$time >= ti)])
mrl <- (KMarea(fit1, ti) - KMarea(fit1, u) + mlemu * survInU ) / survInX
mrl
}
t <- seq(0, Medi, 1)
tt <- sapply(t, mrlf)
plot(t,tt, main = "MRL Function", xlab = "Follow Up Time (Days)", ylab = "Time Remaining (Days)")
plot(t,tt, main = , xlab = "Follow Up Time (Days)", ylab = "Time Remaining (Days)")
plot(t,tt)
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
plot(t,tt,xlab = "Time", ylab = "Time Remaining")
plot(t,tt,lwd=2,xlab = "Time", ylab = "Time Remaining")
?lwd
lines(tt)
lines(tt)
lines(t,tt)
plot(t,tt,lwd=2,xlab = "Time", ylab = "Time Remaining",type="l")
plot(t,tt,lwd=2,xlab = "Time", ylab = "Time Remaining",type="l", col="red")
t <- seq(0, Medi, medi/100)
tt <- sapply(t, mrlf)
plot(t,tt,lwd=2,xlab = "Time", ylab = "Time Remaining",type="l", col="red")
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
require(dplyr)
require(survival)
## bdp data
BPD <- read.csv("C:\\Users\\13239018\\Dropbox\\Projects\\MRL\\bpd.csv", header=T)
dat <- tbl_df(BPD)
dat <- rename(dat, times = ondays, status = censor)
llik <- function (pa, y, shape){
si <- rep(pa[1], dim(y)[1])  ### sigma
sh <- rep(pa[2], dim(y)[1])  ### Shape
#    if ( any(1+sh*y$times/si <= 0 ) | si[1]<=0 | sh[1]>=0.5) outp<- -10^7
if (any(1 + sh * y$times / si <= 0) | si[1] <= 0 | sh[1] >= 0.5) outp <- - 10 ^ 7
else outp <- sum(y$status * log(1 / si * (1 + sh * y$times / si) ^ (- (1 / sh + 1))) + (1 - y$status) * log((1 + sh * y$times / si) ^ (- 1 / sh)))
-outp
}
########    area from u to infinity using KM
KMarea <- function(fit, u){
if (sum(fit$time <= u, na.rm = T) == 0) survInU <- 1        ###### Estimated survival at time u
else survInU <- min(fit$surv[fit$time <= u])
X <- c(u, fit$time[fit$time > u])
Y <- c(survInU, fit$surv[fit$time > u])
sum((X[2 : length(X)] - X[1 : (length(X) - 1)]) * Y[1 : (length(Y) - 1)])
}
mrlf <- function(ti){
if (sum(!fit1$time >= ti) == 0) survInX <- 1 else survInX <- max(fit1$surv[sum(!fit1$time >= ti)])
mrl <- (KMarea(fit1, ti) - KMarea(fit1, u) + mlemu * survInU ) / survInX
mrl
}
fit1 <- survfit(Surv(times, status) ~ 1, data = dat)
Medi <- sort(fit1$time)[length(fit1$time) * 0.80]  #### Medi is the threshold (where 80% of events happens before it)
or <- order(dat$times, decreasing = FALSE)
y <- dat[or, ]
y <- y[y$times > Medi, ]
u <- min(y$times)     #######  threshold
#v<-max(y$times[y$status==1])
v <- max(y$times)     #######  Maximum observed time
y$times <- y$times - u
a <- optim(c(0.1, 0.1), llik, y = y, shape = shape , hessian = TRUE, method = "Nelder-Mead") #,control=list(maxit=10000))
mlesi <- a$par[1]
mlesh <- a$par[2]
survInU <- min(fit1$surv[fit1$time <= u])    ###### Estimated survival at time u
survInV <- min(fit1$surv[fit1$time <= v])    ###### Estimated survival at time v (maximum observed time)
mlemv <- (mlesi + mlesh * (v - u)) / (1 - mlesh)
mlemu <- mlesi / (1 - mlesh)
#####   SurvInX is the survival ar ti
ti <- 0
t <- seq(0, Medi, 1)
tt <- sapply(t, mrlf)
plot(t,tt, type="l",xlab = "Time", ylab = "Time Remaining")
plot(t,tt, type="l", col="red",xlab = "Time", ylab = "Time Remaining")
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
##### log likelihood GPD with censoring
llik <- function (pa, y, shape){
si <- rep(pa[1], dim(y)[1])  ### sigma
sh <- rep(pa[2], dim(y)[1])  ### Shape
if (any(1 + sh * y$times / si <= 0) | si[1] <= 0 | sh[1] >= 0.5) outp <- - 10 ^ 7
else outp <- sum(y$status * log(1 / si * (1 + sh * y$times / si) ^ (- (1 / sh + 1))) + (1 - y$status) * log((1 + sh * y$times / si) ^ (- 1 / sh)))
-outp
}
########    area from u to infinity using KM
KMarea <- function(fit, u){
if (sum(fit$time <= u, na.rm = T) == 0) survInU <- 1
else survInU <- min(fit$surv[fit$time <= u])
X <- c(u, fit$time[fit$time > u])
Y <- c(survInU, fit$surv[fit$time > u])
sum((X[2 : length(X)] - X[1 : (length(X) - 1)]) * Y[1 : (length(Y) - 1)])
}
#### MRL function
mrlf <- function(ti){
if (sum(!fit1$time >= ti) == 0) survInX <- 1 else survInX <- max(fit1$surv[sum(!fit1$time >= ti)])
mrl <- (KMarea(fit1, ti) - KMarea(fit1, u) + mlemu * survInU ) / survInX
mrl
}
fit1 <- survfit(Surv(time, status) ~ 1, data = data.exp)
?survfit
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
require(dplyr)
require(survival)
## bdp data
BPD <- read.csv("C:\\Users\\13239018\\Dropbox\\Projects\\MRL\\bpd.csv", header=T)
dat <- tbl_df(BPD)
dat <- rename(dat, times = ondays, status = censor)
dat <- rename(dat, time = ondays, status = censor)
dat <- tbl_df(BPD)
dat <- rename(dat, time = ondays, status = censor)
fit1 <- survfit(Surv(time, status) ~ 1, data = data.exp)
data.exp <- dat
fit1 <- survfit(Surv(time, status) ~ 1, data = data.exp)
Medi <- sort(fit1$time)[length(fit1$time) * 0.80]
or <- order(data.exp$time, decreasing = FALSE)
y <- data.exp[or, ]
y <- y[y$time > Medi, ]
u <- min(y$time)
v <- max(y$time)
y$time <- y$time - u
a <- optim(c(0.1, 0.1), llik, y = y, shape = shape , hessian = TRUE, method = "Nelder-Mead")
mlesi <- a$par[1]
mlesh <- a$par[2]
survInU <- min(fit1$surv[fit1$time <= u])
survInV <- min(fit1$surv[fit1$time <= v])
mlemv <- (mlesi + mlesh * (v - u)) / (1 - mlesh)
mlemu <- mlesi / (1 - mlesh)
t <- seq(0, Medi, 1)
tt <- sapply(t, mrlf)
plot(t,tt, type="l", col="red",xlab = "Time", ylab = "Time Remaining")
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
shiny::runApp('C:/Users/13239018/Dropbox/Projects/MRL/Dynamic prediction/DynPred Shinyapp/shiny')
library("Rserve", lib.loc="~/R/win-library/3.1")
Rserve()
install.packages("htmlwidget")
devtool::install_github(rstudio/leaflet)
library("devtools", lib.loc="~/R/win-library/3.1")
devtool::install_github(rstudio/leaflet)
devtools::install_github(rstudio/leaflet)
devtools::install_github(RStudio/leaflet)
devtools::install_github(leaflet)
devtools::install_github('rstudio/DT')
shiny::runApp('C:/Users/13239018/Dropbox/John/DynNom CoxPH Example')
shiny::runApp('C:/Users/13239018/Dropbox/John/function counter for R')
install.packages("devtools")
install.packages("roxygen2")
library("devtools", lib.loc="~/R/win-library/3.2")
library("roxygen2", lib.loc="~/R/win-library/3.2")
?predict
?predict.coxph
library(survival)
library(survival)
?predict.coxph
remove.packages("DynNom", lib="~/R/win-library/3.2")
install.packages("DynNom")
?predict.coxph
?coxph
?predict.coxph
remove.packages("DynNom", lib="~/R/win-library/3.2")
install.packages("DynNom")
if(getRversion() >= "2.15.1") utils::globalVariables(c("counter", "Prediction", "input.data", "old.d", "old.d2"))
DynNom.coxph <- function(model, data, clevel = 0.95, covariate = c("slider", "numeric"), ptype = c("surv", "death")){
covariate <- match.arg(covariate)
ptype <- match.arg(ptype)
input.data <- NULL
old.d <- NULL
runApp(list(
ui = bootstrapPage(fluidPage(
titlePanel("Dynamic Nomogram"),
sidebarLayout(sidebarPanel(uiOutput("manySliders.f"),
uiOutput("manySliders.n"),
actionButton("add", "Predict"),
br(), br(),
helpText("Press Quit to exit the application"),
actionButton("quit", "Quit")
),
mainPanel(tabsetPanel(id = "tabs",
tabPanel("Predicted S(t)", plotOutput("plot")),
tabPanel("Inverse Prediction", plotOutput("plot2")),
tabPanel("Numerical Summary", verbatimTextOutput("data.pred")),
tabPanel("Model Summary", verbatimTextOutput("summary")) #verbatimTextOutput dataTableOutput
)
)
))),
server = function(input, output){
observe({
if (input$quit == 1) stopApp()
})
data=data.frame(data)
dim.terms <- length(names(attr(model$terms, "dataClasses")))
for (i in 2:dim.terms){
if (substr(names(attr(model$terms, "dataClasses"))[i],1,2)=="tt"){
nch <- nchar(names(attr(model$terms, "dataClasses"))[i])
names(attr(model$terms, "dataClasses"))[i] <- substr(names(attr(model$terms, "dataClasses"))[i],4,(nch-1))
}
}
neededVar <- names(attr(model$terms, "dataClasses"))[-1]
if (length(attr(model$terms,"term.labels"))==1){
input.data <<- data.frame(data[1 ,neededVar])
names(input.data)[1] <<- names(attr(model$terms, "dataClasses"))[-1]
} else{
input.data <<- data[1 ,neededVar]
}
input.data[1, ] <<- NA
b <- 1
i.factor  <- NULL
i.numeric <- NULL
for (j in 2 : length(attr(model$terms, "dataClasses"))){
for (i in 1 : length(data)){
if (names(attr(model$terms, "dataClasses"))[j] == names(data)[i]){
if (attr(model$terms, "dataClasses")[[j]]  == "factor"
|attr(model$terms, "dataClasses")[[j]] == "ordered"
|attr(model$terms, "dataClasses")[[j]] == "logical"){
i.factor <- rbind(i.factor,c(names(attr(model$terms, "dataClasses"))[j], j, i, b))
break()
}
if (attr(model$terms, "dataClasses")[[j]] == "numeric"){
i.numeric <- rbind(i.numeric, c(names(attr(model$terms, "dataClasses"))[j], j, i))
b <- b + 1
break()
}}}}
tt=names(attr(model$terms, "dataClasses"))[1]
dd=unlist(strsplit(substr(tt, 6, nchar(tt)-1), "[,]"))
tim=dd[1]                         # time
sts=substr(dd[2],2,nchar(dd[2]))  # status
if (length(attr(model$terms,"term.labels"))==1){
input.data <<- data.frame(cbind(stt=NA, ti=NA, cov=NA))
names(input.data)[3] <<- paste(attr(model$terms,"term.labels"))
names(input.data)[1:2] <<- c(paste(sts), paste(tim))
} else{
data1 <- data[ ,neededVar]
input.data <<- cbind(stt=NA, ti=NA, data1[1, ])
names(input.data)[1:2] <<- c(paste(sts), paste(tim))
input.data[1, ] <<- NA
}
if (length(i.numeric)==0){
i.numeric <- matrix(ncol=3)
i.numeric <- rbind(i.numeric,V1=paste(tim))
i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])
i.numeric <- rbind(i.numeric,V1=paste(sts))
i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])
i.numeric <- i.numeric[-1,]
} else {
i.numeric <- rbind(i.numeric,V1=paste(tim))
i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])
i.numeric <- rbind(i.numeric,V1=paste(sts))
i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])
}
limits0 <- c(0,as.integer(quantile(na.omit(data[ ,as.numeric(i.numeric[dim(i.numeric)[1]-1, 3])]), probs=0.7)))
nn <- nrow(i.numeric)
if (is.null(nn)) {nn <- 0}
nf <- nrow(i.factor)
if (is.null(nf)) {nf <- 0}
if (nf > 0){
output$manySliders.f <- renderUI({
slide.bars <- list(lapply(1:nf, function(j){
selectInput(paste("factor", j, sep=""), names(attr(model$terms, "dataClasses")[as.numeric(i.factor[j, 2])]),
model$xlevels[[as.numeric(i.factor[j, 2]) - as.numeric(i.factor[j, 4])]], multiple = FALSE)
}))
do.call(tagList, slide.bars)
})
}
if (nn > 0){
output$manySliders.n <- renderUI({
if (covariate == "slider"){
slide.bars <- list(lapply(1:(nn-2), function(j){
sliderInput(paste("numeric", j, sep=""), i.numeric[j,1],
min = as.integer(min(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))),
max = as.integer(max(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))) + 1,
value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))))
})
,br(),
checkboxInput("times", "Predict in time points (for Inverse Prediction)"),
conditionalPanel(condition = "input.times == true",
sliderInput(paste("numeric", (nn-1), sep=""), i.numeric[(nn-1),1],
min = as.integer(min(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])]))),
max = as.integer(max(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])]))) + 1,
value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])])))))
)
}
if (covariate == "numeric"){
slide.bars <- list(lapply(1:(nn-2), function(j){
numericInput(paste("numeric", j, sep=""), i.numeric[j,1],
value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))))
})
,br(),
checkboxInput("times", "Predict in time points (for Inverse Prediction)"),
conditionalPanel(condition = "input.times == true",
numericInput(paste("numeric", (nn-1), sep=""), i.numeric[(nn-1),1],
value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])])))))
)
}
do.call(tagList, slide.bars)
})
}
a <- 0
new.d<-reactive({
if (nf > 0) {
input.f <- vector("list", nf)
for (i in 1:nf) {
input.f[[i]] <- local({ input[[paste("factor", i, sep="")]] })
names(input.f)[i] <- i.factor[i, 1]
}
}
if (nn > 0) {
input.n <- vector("list", (nn-1))
for (i in 1:(nn-1)) {
input.n[[i]] <- local({ input[[paste("numeric", i, sep="")]] })
names(input.n)[i] <- i.numeric[i, 1]
}
}
if (nn == 0) {
out <- data.frame(do.call("cbind", input.f))
}
if (nf == 0) {
out <- data.frame(do.call("cbind", input.n))
}
if (nf > 0 & nn > 0) {
out <- data.frame(do.call("cbind", input.f),  do.call("cbind", input.n))
}
if (a == 0) {
wher <- match(names(out), names(input.data)[-1])
out <- out[wher]
input.data <<- rbind(input.data[-1], out)
}
if (a > 0) {
wher <- match(names(out), names(input.data))
out <- out[wher]
input.data <<- rbind(input.data, out)
}
a <<- a + 1
out
})
p1 <- NULL
old.d <- NULL
data2 <- reactive({
if (input$add == 0)
return(NULL)
if (input$add > 0){
OUT <- isolate({
if (isTRUE(compare(old.d, new.d())) == FALSE){
new.d <- cbind(stat=1, new.d())
names(new.d)[1] <- paste(sts)
pred=predict(model, newdata=new.d, se.fit = TRUE, conf.int = clevel, type="expected")
upb=exp(-(pred$fit-(qnorm(1 - (1 - clevel) / 2)*pred$se.fit)))
lwb=exp(-(pred$fit+(qnorm(1 - (1 - clevel) / 2)*pred$se.fit)))
d.p <- data.frame(Prediction = exp(-pred$fit), Lower.bound = lwb, Upper.bound = upb)
old.d <<- new.d()
data.p <- cbind(d.p, counter = 1)
p1 <<- rbind(p1, data.p)
p1$count <- seq(1, dim(p1)[1])
p1
} else{
p1$count <- seq(1, dim(p1)[1])
OUT <- p1
}
})
}
OUT
})
s.fr <- NULL
old.d2 <- NULL
b <- 1
dat.p <- reactive({
if (isTRUE(compare(old.d2, new.d())) == FALSE){
s.frame <- isolate({
fit1 <- survfit(model, newdata=new.d())
s.f <- cbind(as.data.frame(summary(fit1)[2:8]), part=b)
s.fr <<- rbind(s.fr, s.f)
old.d2 <<- new.d()
b <<- b + 1
s.fr
})
}
})
output$plot <- renderPlot({
if (input$add == 0)
return(NULL)
if (input$add > 0){
if (ptype == "surv"){
pl <- isolate({
p2 <- ggplot(data=dat.p()) + geom_step(aes(x=time, y=surv, alpha=n.risk, color=as.factor(part), group=part))
p2 <- p2 + ylim(0 ,1)
p2 <- p2 + labs(title = "Estimated survival function", x = "Follow up time", y = "S(t)") + theme_bw()
p2 <- p2 + theme(text = element_text(face = "bold",  size = 14),legend.position = "none")
})
}
if (ptype == "death"){
pl <- isolate({
p2 <- ggplot(data=dat.p()) + geom_step(aes(x=time, y=(1 - surv), alpha=n.risk, color=as.factor(part), group=part))
p2 <- p2 + ylim(0 ,1)
p2 <- p2 + labs(title = "Estimated survival function", x = "Follow up time", y = "1 - S(t)") + theme_bw()
p2 <- p2 + theme(text = element_text(face = "bold",  size = 14),legend.position = "none")
})
}
}
data2()
print(pl)
})
output$plot2 <- renderPlot({
if (input$add == 0)
return(NULL)
isolate({
if (is.null(local({ input[[paste("numeric", 1, sep="")]] }))
& is.null(local({ input[[paste("factor", 1, sep="")]] }))) return(NULL)
lim <- c(0, 1)
yli <- c(0 - 0.5, 10 + 0.5)
if (dim(input.data)[1] > 11) yli <- c(dim(input.data)[1] - 11.5, dim(input.data)[1] - 0.5)
p <- ggplot(data = data2(), aes(x = Prediction, y = 0:(sum(counter) - 1)))
p <- p + geom_point(size = 4, colour = data2()$count, shape = 15)
p <- p + ylim(yli[1] ,yli[2]) + coord_cartesian(xlim = lim)
p <- p + geom_errorbarh(xmax = data2()$Upper.bound, xmin = data2()$Lower.bound,
size = 1.45, height = 0.4, colour = data2()$count)
p <- p + labs(title = paste(clevel*100, "% ", "Confidence Interval for Survival Probability", sep=""), x = "Survival Probability", y = NULL)
p <- p + theme_bw() + theme(axis.text.y = element_blank(), text = element_text(face = "bold",  size = 14))
print(p)
})
data2()
})
output$data.pred <- renderPrint({
if (input$add > 0){
isolate({
if (nrow(data2()>0)){
data.p <- cbind(input.data[-1, ], data2()[1:3])
stargazer(data.p, summary = FALSE, type = "text")
}
})
}
})
output$summary <- renderPrint({ #renderPrint #renderDataTable
#if (stype == "plain"){
#  summary(model)
#}
coef.c <- exp(model$coef)
ci.c <- exp(suppressMessages(confint(model, level = clevel)))
stargazer(model, coef=list(coef.c), ci.custom=list(ci.c), p.auto=F, type = "text", omit.stat = c("LL", "ser", "f"), ci = TRUE, ci.level = clevel, single.row = TRUE,
title = paste("Cox model:", model$call[2], sep=" "))
})
}
)
)
}
library("survival", lib.loc="C:/Program Files/R/R-3.2.2/library")
?coxph
cox.tt <- coxph(Surv(time, status) ~ ph.ecog + tt(age), data=lung,
tt=function(x,t,...) pspline(x + t/365.25))
DynNom.coxph(cox.tt,lung)
library("compare", lib.loc="~/R/win-library/3.2")
library("stargazer", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
DynNom.coxph(cox.tt,lung)
install.packages("sglr")
library("sglr", lib.loc="~/R/win-library/3.2")
result <- glrSearch(p=c(.5, .75), alpha=0.05, beta=0.10)
## print(result)  ## large amounts of output possible!
result[1:3]
result <- glrSearch(p=c(.5, .75), alpha=0.05, beta=0.10)
result <- glrSearch(p=c(.5, .75), alpha=0.05, beta=0.10, verbose=TRUE)
result <- glrSearch(p=c(.5, .75), alpha=0.05, beta=0.10, gridIt=TRUE)
print(result$alphaTable)
print(result$betaTable)
result <- glrSearch(p=c(.5, 2/3), alpha=0.05, beta=0.10)
print(names(result))
