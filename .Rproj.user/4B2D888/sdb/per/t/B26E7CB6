{
    "contents" : "if(getRversion() >= \"2.15.1\") utils::globalVariables(c(\"counter\", \"Prediction\", \"input.data\", \"old.d\", \"old.d2\"))\n\nDynNom.coxph <- function(model, data, clevel = 0.95, covariate = c(\"slider\", \"numeric\"), ptype = c(\"surv\", \"death\")){\n  \n  covariate <- match.arg(covariate)\n  ptype <- match.arg(ptype)\n  input.data <- NULL\n  old.d <- NULL\n  \n  runApp(list(\n    \n    ui = bootstrapPage(fluidPage(\n      titlePanel(\"Dynamic Nomogram\"),\n      sidebarLayout(sidebarPanel(uiOutput(\"manySliders.f\"),\n                                 uiOutput(\"manySliders.n\"),\n                                 actionButton(\"add\", \"Predict\"),\n                                 br(), br(),\n                                 helpText(\"Press Quit to exit the application\"),\n                                 actionButton(\"quit\", \"Quit\")\n      ),\n      mainPanel(tabsetPanel(id = \"tabs\",\n                            tabPanel(\"Predicted S(t)\", plotOutput(\"plot\")),\n                            tabPanel(\"Inverse Prediction\", plotOutput(\"plot2\")),\n                            tabPanel(\"Numerical Summary\", verbatimTextOutput(\"data.pred\")),\n                            tabPanel(\"Model Summary\", verbatimTextOutput(\"summary\")) #verbatimTextOutput dataTableOutput\n      )\n      )\n      ))),\n    \n    server = function(input, output){\n      \n      observe({\n        if (input$quit == 1) stopApp()\n      })\n      \n      data=data.frame(data)\n      \n      neededVar <- names(attr(model$terms, \"dataClasses\"))[-1]\n      if (length(attr(model$terms,\"term.labels\"))==1){\n        input.data <<- data.frame(data[1 ,neededVar])\n        names(input.data)[1] <<- names(attr(model$terms, \"dataClasses\"))[-1]\n      } else{\n        input.data <<- data[1 ,neededVar]\n      }\n      input.data[1, ] <<- NA\n      \n      b <- 1\n      i.factor  <- NULL\n      i.numeric <- NULL\n      for (j in 2 : length(attr(model$terms, \"dataClasses\"))){\n        for (i in 1 : length(data)){\n          if (names(attr(model$terms, \"dataClasses\"))[j] == names(data)[i]){\n            if (attr(model$terms, \"dataClasses\")[[j]]  == \"factor\"\n                |attr(model$terms, \"dataClasses\")[[j]] == \"ordered\"\n                |attr(model$terms, \"dataClasses\")[[j]] == \"logical\"){\n              i.factor <- rbind(i.factor,c(names(attr(model$terms, \"dataClasses\"))[j], j, i, b))\n              break()\n            }\n            if (attr(model$terms, \"dataClasses\")[[j]] == \"numeric\"){\n              i.numeric <- rbind(i.numeric, c(names(attr(model$terms, \"dataClasses\"))[j], j, i))\n              b <- b + 1\n              break()\n            }}}}\n      \n      tt=names(attr(model$terms, \"dataClasses\"))[1]\n      dd=unlist(strsplit(substr(tt, 6, nchar(tt)-1), \"[,]\"))\n      tim=dd[1]                         # time\n      sts=substr(dd[2],2,nchar(dd[2]))  # status\n      \n      if (length(attr(model$terms,\"term.labels\"))==1){\n        input.data <<- data.frame(cbind(stt=NA, ti=NA, cov=NA))\n        names(input.data)[3] <<- paste(attr(model$terms,\"term.labels\"))\n        names(input.data)[1:2] <<- c(paste(sts), paste(tim))\n      } else{\n        data1 <- data[ ,neededVar]\n        input.data <<- cbind(stt=NA, ti=NA, data1[1, ])\n        names(input.data)[1:2] <<- c(paste(sts), paste(tim))\n        input.data[1, ] <<- NA\n      }\n      \n      if (length(i.numeric)==0){\n        i.numeric <- matrix(ncol=3)\n        i.numeric <- rbind(i.numeric,V1=paste(tim))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])\n        i.numeric <- rbind(i.numeric,V1=paste(sts))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])\n        i.numeric <- i.numeric[-1,]\n      } else {\n        i.numeric <- rbind(i.numeric,V1=paste(tim))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])\n        i.numeric <- rbind(i.numeric,V1=paste(sts))\n        i.numeric[dim(i.numeric)[1], 3] <- which(names(data)==i.numeric[dim(i.numeric)[1], 1])\n      }\n      \n      limits0 <- c(0,as.integer(quantile(na.omit(data[ ,as.numeric(i.numeric[dim(i.numeric)[1]-1, 3])]), probs=0.7)))\n      \n      nn <- nrow(i.numeric)\n      if (is.null(nn)) {nn <- 0}\n      nf <- nrow(i.factor)\n      if (is.null(nf)) {nf <- 0}\n      \n      if (nf > 0){\n        output$manySliders.f <- renderUI({\n          slide.bars <- list(lapply(1:nf, function(j){\n            selectInput(paste(\"factor\", j, sep=\"\"), names(attr(model$terms, \"dataClasses\")[as.numeric(i.factor[j, 2])]),\n                        model$xlevels[[as.numeric(i.factor[j, 2]) - as.numeric(i.factor[j, 4])]], multiple = FALSE)\n          }))\n          do.call(tagList, slide.bars)\n        })\n      }\n      \n      if (nn > 0){\n        output$manySliders.n <- renderUI({\n          if (covariate == \"slider\"){\n            slide.bars <- list(lapply(1:(nn-2), function(j){\n              sliderInput(paste(\"numeric\", j, sep=\"\"), i.numeric[j,1],\n                          min = as.integer(min(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))),\n                          max = as.integer(max(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))) + 1,\n                          value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))))\n            })\n            ,br(),\n            checkboxInput(\"times\", \"Predict in time points (for Inverse Prediction)\"),\n            conditionalPanel(condition = \"input.times == true\",\n                             sliderInput(paste(\"numeric\", (nn-1), sep=\"\"), i.numeric[(nn-1),1],\n                                         min = as.integer(min(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])]))),\n                                         max = as.integer(max(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])]))) + 1,\n                                         value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])])))))\n            )\n          }\n          \n          if (covariate == \"numeric\"){\n            slide.bars <- list(lapply(1:(nn-2), function(j){\n              numericInput(paste(\"numeric\", j, sep=\"\"), i.numeric[j,1], \n                           value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[j, 3])]))))\n            })\n            ,br(),\n            checkboxInput(\"times\", \"Predict in time points (for Inverse Prediction)\"),\n            conditionalPanel(condition = \"input.times == true\",\n                             numericInput(paste(\"numeric\", (nn-1), sep=\"\"), i.numeric[(nn-1),1], \n                                          value = as.integer(mean(na.omit(data[ ,as.numeric(i.numeric[(nn-1), 3])])))))\n            )\n          }\n          do.call(tagList, slide.bars)\n        })\n      }\n      \n      a <- 0\n      new.d<-reactive({\n        if (nf > 0) {\n          input.f <- vector(\"list\", nf)\n          for (i in 1:nf) {\n            input.f[[i]] <- local({ input[[paste(\"factor\", i, sep=\"\")]] })\n            names(input.f)[i] <- i.factor[i, 1] \n          }\n        }\n        if (nn > 0) {\n          input.n <- vector(\"list\", (nn-1))\n          for (i in 1:(nn-1)) {\n            input.n[[i]] <- local({ input[[paste(\"numeric\", i, sep=\"\")]] })\n            names(input.n)[i] <- i.numeric[i, 1]\n          }\n        }\n        if (nn == 0) {\n          out <- data.frame(do.call(\"cbind\", input.f)) \n        }\n        if (nf == 0) {\n          out <- data.frame(do.call(\"cbind\", input.n)) \n        }\n        if (nf > 0 & nn > 0) {\n          out <- data.frame(do.call(\"cbind\", input.f),  do.call(\"cbind\", input.n)) \n        }\n        if (a == 0) {\n          wher <- match(names(out), names(input.data)[-1])\n          out <- out[wher]\n          input.data <<- rbind(input.data[-1], out)\n        }\n        if (a > 0) {\n          wher <- match(names(out), names(input.data))\n          out <- out[wher]\n          input.data <<- rbind(input.data, out)\n        }\n        a <<- a + 1\n        out\n      })\n      \n      p1 <- NULL\n      old.d <- NULL\n      data2 <- reactive({\n        if (input$add == 0) \n          return(NULL)\n        if (input$add > 0){\n          OUT <- isolate({\n            if (isTRUE(compare(old.d, new.d())) == FALSE){\n              new.d <- cbind(stat=1, new.d())\n              names(new.d)[1] <- paste(sts)\n              pred=predict(model, newdata=new.d, se.fit = TRUE, conf.int = clevel, type=\"expected\")\n              upb=exp(-(pred$fit-(qnorm(1 - (1 - clevel) / 2)*pred$se.fit)))\n              lwb=exp(-(pred$fit+(qnorm(1 - (1 - clevel) / 2)*pred$se.fit)))\n              d.p <- data.frame(Prediction = exp(-pred$fit), Lower.bound = lwb, Upper.bound = upb)\n              old.d <<- new.d()\n              data.p <- cbind(d.p, counter = 1)\n              p1 <<- rbind(p1, data.p)\n              p1$count <- seq(1, dim(p1)[1])\n              p1\n            } else{\n              p1$count <- seq(1, dim(p1)[1])\n              OUT <- p1\n            }\n          })\n        }    \n        OUT\n      })\n      \n      s.fr <- NULL\n      old.d2 <- NULL\n      b <- 1\n      dat.p <- reactive({\n        if (isTRUE(compare(old.d2, new.d())) == FALSE){\n          s.frame <- isolate({\n            fit1 <- survfit(model, newdata=new.d())\n            s.f <- cbind(as.data.frame(summary(fit1)[2:8]), part=b)\n            s.fr <<- rbind(s.fr, s.f)\n            old.d2 <<- new.d()\n            b <<- b + 1\n            s.fr\n          })\n        }\n      })\n      \n      output$plot <- renderPlot({\n        if (input$add == 0)\n          return(NULL)\n        if (input$add > 0){\n          if (ptype == \"surv\"){\n            pl <- isolate({\n              p2 <- ggplot(data=dat.p()) + geom_step(aes(x=time, y=surv, alpha=n.risk, color=as.factor(part), group=part))\n              p2 <- p2 + ylim(0 ,1)\n              p2 <- p2 + labs(title = \"Estimated survival function\", x = \"Follow up time\", y = \"S(t)\") + theme_bw() \n              p2 <- p2 + theme(text = element_text(face = \"bold\",  size = 14),legend.position = \"none\")\n            })\n          } \n          if (ptype == \"death\"){\n            pl <- isolate({\n              p2 <- ggplot(data=dat.p()) + geom_step(aes(x=time, y=(1 - surv), alpha=n.risk, color=as.factor(part), group=part))\n              p2 <- p2 + ylim(0 ,1)\n              p2 <- p2 + labs(title = \"Estimated survival function\", x = \"Follow up time\", y = \"1 - S(t)\") + theme_bw() \n              p2 <- p2 + theme(text = element_text(face = \"bold\",  size = 14),legend.position = \"none\")\n            })\n          }\n        }\n        data2()\n        print(pl)\n      })\n      \n      output$plot2 <- renderPlot({\n        if (input$add == 0)\n          return(NULL)\n        isolate({\n          if (is.null(local({ input[[paste(\"numeric\", 1, sep=\"\")]] }))\n              & is.null(local({ input[[paste(\"factor\", 1, sep=\"\")]] }))) return(NULL)\n          lim <- c(0, 1)\n          yli <- c(0 - 0.5, 10 + 0.5)\n          if (dim(input.data)[1] > 11) yli <- c(dim(input.data)[1] - 11.5, dim(input.data)[1] - 0.5)\n          p <- ggplot(data = data2(), aes(x = Prediction, y = 0:(sum(counter) - 1)))\n          p <- p + geom_point(size = 4, colour = data2()$count, shape = 15)\n          p <- p + ylim(yli[1] ,yli[2]) + coord_cartesian(xlim = lim)\n          p <- p + geom_errorbarh(xmax = data2()$Upper.bound, xmin = data2()$Lower.bound,\n                                  size = 1.45, height = 0.4, colour = data2()$count)\n          p <- p + labs(title = paste(clevel*100, \"% \", \"Confidence Interval for Survival Probability\", sep=\"\"), x = \"Survival Probability\", y = NULL)\n          p <- p + theme_bw() + theme(axis.text.y = element_blank(), text = element_text(face = \"bold\",  size = 14))\n          print(p)\n        })\n        data2()\n      })\n      \n      output$data.pred <- renderPrint({\n        if (input$add > 0){\n          isolate({\n            if (nrow(data2()>0)){\n              data.p <- cbind(input.data[-1, ], data2()[1:3])\n              stargazer(data.p, summary = FALSE, type = \"text\")\n            }\n          })\n        }\n      })\n      \n      output$summary <- renderPrint({ #renderPrint #renderDataTable\n        #if (stype == \"plain\"){\n        #  summary(model)\n        #}\n        coef.c <- exp(model$coef)\n        ci.c <- exp(suppressMessages(confint(model, level = clevel)))\n        stargazer(model, coef=list(coef.c), ci.custom=list(ci.c), p.auto=F, type = \"text\", omit.stat = c(\"LL\", \"ser\", \"f\"), ci = TRUE, ci.level = clevel, single.row = TRUE,\n                  title = paste(\"Cox model:\", model$call[2], sep=\" \"))\n\n      })\n      \n    }\n  )\n  )\n}",
    "created" : 1443609271309.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1049185029",
    "id" : "B26E7CB6",
    "lastKnownWriteTime" : 1443463772,
    "path" : "C:/Users/Amir/Dropbox/Projects/DynNom project/DynNom V2.0/DynNom_coxph.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}